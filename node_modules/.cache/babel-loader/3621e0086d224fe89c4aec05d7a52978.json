{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/chris/Desktop/Bridge Dealer Statistical Analysis/bridge-dealer-statistical-analysis/src/DealerTest.js\";\nimport React from 'react';\nimport playingCards from './playingCards';\n\nclass DealerTest extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.shuffle = arr => {\n      var i, j, temp;\n\n      for (i = arr.length - 1; i > 0; i--) {\n        j = Math.floor(Math.random() * (i + 1));\n        temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n      }\n\n      return arr;\n    };\n\n    this.getHCP = arr => {\n      let hcp = 0;\n\n      for (let i = 0; i < arr.length; i++) {\n        let currentCardValue = arr[i].value;\n\n        if (currentCardValue === 14) {\n          hcp += 4;\n        } else if (currentCardValue === 13) {\n          hcp += 3;\n        } else if (currentCardValue === 12) {\n          hcp += 2;\n        } else if (currentCardValue === 11) {\n          hcp += 1;\n        } //console.log(\"HCP: \" + hcp);\n\n      }\n\n      return hcp;\n    };\n\n    this.average = array => array.reduce((a, b) => a + b) / array.length;\n\n    this.median = function (array) {\n      array = array.sort();\n\n      if (array.length % 2 === 0) {\n        // array with even number elements\n        return (array[array.length / 2] + array[array.length / 2 - 1]) / 2;\n      } else {\n        return array[(array.length - 1) / 2]; // array with odd number elements\n      }\n    };\n\n    this.state = {};\n    console.log(playingCards);\n  } // Helper Function: shuffle the deck to start with, source: https://www.jstips.co/en/javascript/shuffle-an-array/\n\n\n  render() {\n    const numberOfSimsRun = 100; // set up the loop and vars\n\n    let northAllHands = [];\n    let southAllHands = [];\n    let eastAllHands = [];\n    let westAllHands = [];\n\n    for (let i = 0; i < numberOfSimsRun; i++) {\n      const newDeck = [...playingCards];\n      this.shuffle(newDeck);\n      const northCards = newDeck.splice(0, 13);\n      const northHCP = this.getHCP(northCards);\n      northAllHands.push(northHCP);\n      const southCards = newDeck.splice(0, 13);\n      const southHCP = this.getHCP(southCards);\n      southAllHands.push(southHCP);\n      const eastCards = newDeck.splice(0, 13);\n      const eastHCP = this.getHCP(eastCards);\n      eastAllHands.push(eastHCP);\n      const westCards = newDeck.splice(0, 13);\n      const westHCP = this.getHCP(westCards);\n      westAllHands.push(westHCP);\n    }\n\n    const northMinHCP = Math.min(...northAllHands);\n    const northMaxHCP = Math.max(...northAllHands);\n    const northMedian = this.median(northAllHands);\n    const northAvg = this.average(northAllHands).toFixed(2);\n    const southMinHCP = Math.min(...southAllHands);\n    const southMaxHCP = Math.max(...southAllHands);\n    const southAvg = this.average(southAllHands).toFixed(2);\n    const eastMinHCP = Math.min(...eastAllHands);\n    const eastMaxHCP = Math.max(...eastAllHands);\n    const eastAvg = this.average(eastAllHands).toFixed(2);\n    const westMinHCP = Math.min(...westAllHands);\n    const westMaxHCP = Math.max(...westAllHands);\n    const westAvg = this.average(westAllHands).toFixed(2);\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"clb-dealer-test-area\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: [\"Statistical Analysis based on \", numberOfSimsRun, \" Hands Dealt\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"section-summary-area\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: [\"North HCP Avg: \", northAvg]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 118,\n            columnNumber: 26\n          }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n            children: [\"North HCP Median: \", northMedian]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 119,\n            columnNumber: 26\n          }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n            children: [\"North HCP High: \", northMaxHCP]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 120,\n            columnNumber: 26\n          }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n            children: [\"North HCP Low: \", northMinHCP]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 121,\n            columnNumber: 26\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"section-summary-area\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: [\"South HCP Avg: \", southAvg]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 125,\n            columnNumber: 26\n          }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n            children: [\"South HCP High: \", southMaxHCP]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 126,\n            columnNumber: 26\n          }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n            children: [\"South HCP Low: \", southMinHCP]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 127,\n            columnNumber: 26\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"section-summary-area\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: [\"East HCP Avg: \", eastAvg]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 131,\n            columnNumber: 26\n          }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n            children: [\"East HCP High: \", eastMaxHCP]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 132,\n            columnNumber: 26\n          }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n            children: [\"East HCP Low: \", eastMinHCP]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 133,\n            columnNumber: 26\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"section-summary-area\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: [\"West HCP Avg: \", westAvg]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 137,\n            columnNumber: 26\n          }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n            children: [\"West HCP High: \", westMaxHCP]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 138,\n            columnNumber: 26\n          }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n            children: [\"West HCP Low: \", westMinHCP]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 139,\n            columnNumber: 26\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 18\n      }, this)\n    }, void 0, false);\n  }\n\n}\n\nexport default DealerTest;","map":{"version":3,"sources":["/Users/chris/Desktop/Bridge Dealer Statistical Analysis/bridge-dealer-statistical-analysis/src/DealerTest.js"],"names":["React","playingCards","DealerTest","Component","constructor","props","shuffle","arr","i","j","temp","length","Math","floor","random","getHCP","hcp","currentCardValue","value","average","array","reduce","a","b","median","sort","state","console","log","render","numberOfSimsRun","northAllHands","southAllHands","eastAllHands","westAllHands","newDeck","northCards","splice","northHCP","push","southCards","southHCP","eastCards","eastHCP","westCards","westHCP","northMinHCP","min","northMaxHCP","max","northMedian","northAvg","toFixed","southMinHCP","southMaxHCP","southAvg","eastMinHCP","eastMaxHCP","eastAvg","westMinHCP","westMaxHCP","westAvg"],"mappings":"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","sourcesContent":["import React from 'react';\nimport playingCards from './playingCards';\n\nclass DealerTest extends React.Component {\n\n     constructor(props) {\n          super(props);\n          this.state = {\n\n          }\n\n          console.log(playingCards);\n\n     }\n\n     // Helper Function: shuffle the deck to start with, source: https://www.jstips.co/en/javascript/shuffle-an-array/\n     shuffle = (arr) => {\n         var i,\n             j,\n             temp;\n         for (i = arr.length - 1; i > 0; i--) {\n             j = Math.floor(Math.random() * (i + 1));\n             temp = arr[i];\n             arr[i] = arr[j];\n             arr[j] = temp;\n         }\n         return arr;\n     };\n\n\n     getHCP = (arr) => {\n\n          let hcp = 0;\n\n          for(let i = 0; i < arr.length; i++) {\n\n               let currentCardValue = arr[i].value;\n               if( currentCardValue === 14 ) { hcp += 4; }\n               else if( currentCardValue === 13 ) { hcp += 3; }\n               else if( currentCardValue === 12 ) { hcp += 2; }\n               else if( currentCardValue === 11 ) { hcp += 1; }\n               //console.log(\"HCP: \" + hcp);\n          }\n\n          return hcp;\n\n     }\n\n\n     average = (array) => array.reduce((a, b) => a + b) / array.length;\n\n     median = function(array) {\n          array = array.sort();\n          if (array.length % 2 === 0) { // array with even number elements\n          return (array[array.length/2] + array[(array.length / 2) - 1]) / 2;\n          }\n          else {\n          return array[(array.length - 1) / 2]; // array with odd number elements\n          }\n     };\n\n\n     render() {\n\n          const numberOfSimsRun = 100;\n\n          // set up the loop and vars\n          let northAllHands = [];\n          let southAllHands = [];\n          let eastAllHands = [];\n          let westAllHands = [];\n\n          for(let i = 0; i < numberOfSimsRun; i++) {\n\n               const newDeck = [...playingCards];\n               this.shuffle(newDeck);\n\n               const northCards = newDeck.splice(0,13);\n               const northHCP = this.getHCP(northCards);\n               northAllHands.push(northHCP);\n\n               const southCards = newDeck.splice(0,13);\n               const southHCP = this.getHCP(southCards);\n               southAllHands.push(southHCP);\n\n               const eastCards = newDeck.splice(0,13);\n               const eastHCP = this.getHCP(eastCards);\n               eastAllHands.push(eastHCP);\n\n               const westCards = newDeck.splice(0,13);\n               const westHCP = this.getHCP(westCards);\n               westAllHands.push(westHCP);\n\n          }\n\n          const northMinHCP  = Math.min(...northAllHands);\n          const northMaxHCP  = Math.max(...northAllHands);\n          const northMedian = this.median(northAllHands);\n          const northAvg = this.average(northAllHands).toFixed(2);\n\n          const southMinHCP  = Math.min(...southAllHands);\n          const southMaxHCP  = Math.max(...southAllHands);\n          const southAvg = this.average(southAllHands).toFixed(2);\n\n          const eastMinHCP  = Math.min(...eastAllHands);\n          const eastMaxHCP  = Math.max(...eastAllHands);\n          const eastAvg = this.average(eastAllHands).toFixed(2);\n\n          const westMinHCP  = Math.min(...westAllHands);\n          const westMaxHCP  = Math.max(...westAllHands);\n          const westAvg = this.average(westAllHands).toFixed(2);\n\n          return (\n               <>\n                 <div className=\"clb-dealer-test-area\">\n                    <h1>Statistical Analysis based on {numberOfSimsRun} Hands Dealt</h1>\n                    <div className=\"section-summary-area\">\n                         <h2>North HCP Avg: {northAvg}</h2>\n                         <h3>North HCP Median: {northMedian}</h3>\n                         <h3>North HCP High: {northMaxHCP}</h3>\n                         <h3>North HCP Low: {northMinHCP}</h3>\n                    </div>\n\n                    <div className=\"section-summary-area\">\n                         <h2>South HCP Avg: {southAvg}</h2>\n                         <h3>South HCP High: {southMaxHCP}</h3>\n                         <h3>South HCP Low: {southMinHCP}</h3>\n                    </div>\n\n                    <div className=\"section-summary-area\">\n                         <h2>East HCP Avg: {eastAvg}</h2>\n                         <h3>East HCP High: {eastMaxHCP}</h3>\n                         <h3>East HCP Low: {eastMinHCP}</h3>\n                    </div>\n\n                    <div className=\"section-summary-area\">\n                         <h2>West HCP Avg: {westAvg}</h2>\n                         <h3>West HCP High: {westMaxHCP}</h3>\n                         <h3>West HCP Low: {westMinHCP}</h3>\n                    </div>\n\n                 </div>\n            </>\n          );\n\n     }\n\n}\n\nexport default DealerTest;\n"]},"metadata":{},"sourceType":"module"}